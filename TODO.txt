# TODO LIST
This is a general TODO list that should be fixed for better code and
speed! (Also, consider this a list of the number of times I've pulled my
hair out while documenting my code...)

# TODO FOR nc_diag_write
 -> initialize EVERYTHING - some vars are not initialized, and things
    can get a little strange... initialize to 0 or -1 (maybe 1 as well,
    but don't know if there's anything that should EVER be initialized
    to 1...)
    
 -> get rid of the NLAYER type and fill constants - the NF90_* ones work
    just as well!
    
 -> rip out the silly allocation multiplier stuff - get rid of the type
    and subroutines, and just reallocate like this:
    
    new_size = old_size * 2
    
 -> move the actual nf90 def locking (nf90_enddef) to our lockdef, and
    have our nc_diag_write call our own def lock
    
 -> private/public for funcs and subs - you really, really, really don't
    want people to call functions that are private!
    
 -> clarify naming schemes for write/finish - finish is super tempting
    to call...
     -> make nc_diag_write just write + lock data, and maybe make
        nc_diag_finish public? so we can have a solely data/def lock
        mode, with the ability to still do varattr fun
    
 -> chaninfo (and maybe metadata + data2d) load_def - make sure that
    init_done is actually true, otherwise bad things will happen...
    (maybe this is already checked within nc_diag_write.F90?)
    
 -> optimize chaninfo def_loading - we can just check for the nchans
    dim ID inside the var dim ids (instead of comparing names in a loop,
    which is slower)
    
    a la: if (any(var dim ids) == nchan_dim_id) do nchan var handling
    
 -> shockingly, varattr is not called at all during load_def! Thinking
    it over, it may be that varattr triggers some define stuff that
    doesn't work in append mode... which might be sorta silly. If that's
    the case, a simple nf90_redef and nf90_enddef would fix that! If
    not... well, just put varattr calls back in!
    
    this call needs to be made to register with varattr:
    nc_diag_varattr_add_var(var_name, var_type, var_id)
    
    var_type is the NLAYER type (and NOT the NF90 type, like it should
    be... see? nlayer was a seriously bad idea...)
    
 -> on that note, diag_varattr_store%types is not used at all, so get
    rid of it! ([grep diag_varattr_store%types *] within nc_diag_write
    directory yield no use outside of varattr source, and even within
    varattr it's just stored and allocated, not used at all...)
    
 -> on a super random note, looking back at old code is like looking
    back at your old high school freshman year... everything you did
    seemed good at the time, but looking back, you can only feel
    shame and terror...
    
 -> use better preallocs - current preallocs are really messy, and
    tends to waste memory...
